[cache]
basepath = "/tmp/tegola-cache"
type = "file"

[[maps]]
name = "osm"

[[maps.layers]]
max_zoom = 9
min_zoom = 5
provider_layer = "osm.landcover-low-zoom"

[[maps.layers]]
max_zoom = 14
min_zoom = 10
provider_layer = "osm.landcover"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.landcover-line"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.water-lines-casing"

[[maps.layers]]
max_zoom = 11
min_zoom = 8
provider_layer = "osm.water-lines-low-zoom"

[[maps.layers]]
max_zoom = 14
min_zoom = 12
provider_layer = "osm.water-lines"

[[maps.layers]]
max_zoom = 14
min_zoom = 0
provider_layer = "osm.water-areas"

[[maps.layers]]
max_zoom = 14
min_zoom = 5
provider_layer = "osm.landcover-area-symbols"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.marinas-area"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.water-barriers-line"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.water-barriers-poly"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.springs"

[[maps.layers]]
max_zoom = 14
min_zoom = 12
provider_layer = "osm.piers-poly"

[[maps.layers]]
max_zoom = 14
min_zoom = 12
provider_layer = "osm.piers-line"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.water-barriers-point"

[[maps.layers]]
max_zoom = 14
min_zoom = 12
provider_layer = "osm.bridge"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.buildings"

[[maps.layers]]
max_zoom = 14
min_zoom = 10
provider_layer = "osm.tunnels"

[[maps.layers]]
max_zoom = 14
min_zoom = 8
provider_layer = "osm.landuse-overlay"

[[maps.layers]]
max_zoom = 14
min_zoom = 10
provider_layer = "osm.tourism-boundary"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.line-barriers"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.cliffs"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.area-barriers"

[[maps.layers]]
max_zoom = 14
min_zoom = 8
provider_layer = "osm.ferry-routes"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.turning-circle-casing"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.highway-area-casing"

[[maps.layers]]
max_zoom = 14
min_zoom = 10
provider_layer = "osm.roads-casing"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.highway-area-fill"

[[maps.layers]]
max_zoom = 14
min_zoom = 10
provider_layer = "osm.roads-fill"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.turning-circle-fill"

[[maps.layers]]
max_zoom = 14
min_zoom = 12
provider_layer = "osm.aerialways"

[[maps.layers]]
max_zoom = 9
min_zoom = 6
provider_layer = "osm.roads-low-zoom"

[[maps.layers]]
max_zoom = 14
min_zoom = 12
provider_layer = "osm.waterway-bridges"

[[maps.layers]]
max_zoom = 14
min_zoom = 10
provider_layer = "osm.bridges"

[[maps.layers]]
max_zoom = 14
min_zoom = 11
provider_layer = "osm.guideways"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.entrances"

[[maps.layers]]
max_zoom = 14
min_zoom = 11
provider_layer = "osm.aeroways"

[[maps.layers]]
max_zoom = 10
min_zoom = 4
provider_layer = "osm.admin-low-zoom"

[[maps.layers]]
max_zoom = 12
min_zoom = 11
provider_layer = "osm.admin-mid-zoom"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.admin-high-zoom"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.power-minorline"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.power-line"

[[maps.layers]]
max_zoom = 14
min_zoom = 8
provider_layer = "osm.protected-areas"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.trees"

[[maps.layers]]
max_zoom = 14
min_zoom = 2
provider_layer = "osm.country-names"

[[maps.layers]]
max_zoom = 14
min_zoom = 3
provider_layer = "osm.capital-names"

[[maps.layers]]
max_zoom = 14
min_zoom = 4
provider_layer = "osm.state-names"

[[maps.layers]]
max_zoom = 14
min_zoom = 4
provider_layer = "osm.placenames-medium"

[[maps.layers]]
max_zoom = 14
min_zoom = 12
provider_layer = "osm.placenames-small"

[[maps.layers]]
max_zoom = 14
min_zoom = 12
provider_layer = "osm.stations"

[[maps.layers]]
max_zoom = 14
min_zoom = 10
provider_layer = "osm.amenity-points"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.amenity-line"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.power-towers"

[[maps.layers]]
max_zoom = 12
min_zoom = 10
provider_layer = "osm.roads-text-ref-low-zoom"

[[maps.layers]]
max_zoom = 14
min_zoom = 11
provider_layer = "osm.junctions"

[[maps.layers]]
max_zoom = 14
min_zoom = 11
provider_layer = "osm.bridge-text"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.roads-text-ref"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.roads-area-text-name"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.roads-text-name"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.paths-text-name"

[[maps.layers]]
max_zoom = 14
min_zoom = 11
provider_layer = "osm.railways-text-name"

[[maps.layers]]
max_zoom = 9
min_zoom = 0
provider_layer = "osm.text-poly-low-zoom"

[[maps.layers]]
max_zoom = 14
min_zoom = 10
provider_layer = "osm.text-line"

[[maps.layers]]
max_zoom = 14
min_zoom = 10
provider_layer = "osm.text-point"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.building-text"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.interpolation"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.addresses"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.water-lines-text"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.ferry-routes-text"

[[maps.layers]]
max_zoom = 14
min_zoom = 11
provider_layer = "osm.admin-text"

[[maps.layers]]
max_zoom = 14
min_zoom = 13
provider_layer = "osm.protected-areas-text"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.amenity-low-priority"

[[maps.layers]]
max_zoom = 14
min_zoom = 14
provider_layer = "osm.amenity-low-priority-poly"

[[providers]]
database = "gis"
host = "localhost"
max_connections = 100
name = "osm"
password = "gis"
port = 5432
srid = 3857
type = "postgis"
user = "gis"

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "landcover-low-zoom"
sql = """
SELECT ST_AsBinary(way) AS geom, \"way_pixels\", \"feature\" FROM (SELECT
    way, way_pixels,
    COALESCE(wetland, landuse, \"natural\") AS feature
  FROM (SELECT
      way,
      ('landuse_' || (CASE WHEN landuse IN ('forest', 'farmland', 'residential', 'commercial', 'retail', 'industrial',
                                            'meadow', 'grass', 'village_green', 'vineyard', 'orchard') THEN landuse ELSE NULL END)) AS landuse,
      ('natural_' || (CASE WHEN \"natural\" IN ('wood', 'sand', 'scree', 'shingle', 'bare_rock', 'heath', 'grassland', 'scrub') THEN \"natural\" ELSE NULL END)) AS \"natural\",
      ('wetland_' || (CASE WHEN \"natural\" IN ('wetland', 'mud') THEN (CASE WHEN \"natural\" IN ('mud') THEN \"natural\" ELSE tags->'wetland' END) ELSE NULL END)) AS wetland,
      way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
      way_area
    FROM planet_osm_polygon
    WHERE (landuse IN ('forest', 'farmland', 'residential', 'commercial', 'retail', 'industrial', 'meadow', 'grass', 'village_green', 'vineyard', 'orchard')
      OR \"natural\" IN ('wood', 'wetland', 'mud', 'sand', 'scree', 'shingle', 'bare_rock', 'heath', 'grassland', 'scrub'))
      AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
      AND building IS NULL
  ) AS features
  ORDER BY way_area DESC, feature
) AS landcover_low_zoom WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "landcover"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"religion\", \"way_pixels\", \"is_building\", \"feature\" FROM (SELECT
    way, name, religion, way_pixels, is_building,
    COALESCE(aeroway, amenity, wetland, power, landuse, leisure, man_made, \"natural\", tourism, highway, railway) AS feature
  FROM (SELECT
      way, COALESCE(name, '') AS name,
      ('aeroway_' || (CASE WHEN aeroway IN ('apron', 'aerodrome') THEN aeroway ELSE NULL END)) AS aeroway,
      ('amenity_' || (CASE WHEN amenity IN ('bicycle_parking', 'motorcycle_parking', 'university', 'college', 'school', 'taxi',
                                            'hospital', 'kindergarten', 'grave_yard', 'prison', 'place_of_worship', 'clinic', 'ferry_terminal',
                                            'marketplace', 'community_centre', 'social_facility', 'arts_centre', 'parking_space', 'bus_station',
                                            'fire_station', 'police')
                      OR amenity IN ('parking') AND (tags->'parking' NOT IN ('underground') OR (tags->'parking') IS NULL) THEN amenity ELSE NULL END)) AS amenity,
      ('landuse_' || (CASE WHEN landuse IN ('quarry', 'vineyard', 'orchard', 'cemetery', 'residential', 'garages', 'meadow', 'grass',
                                            'allotments', 'forest', 'farmyard', 'farmland', 'greenhouse_horticulture',
                                            'recreation_ground', 'village_green', 'retail', 'industrial', 'railway', 'commercial',
                                            'brownfield', 'landfill', 'construction', 'plant_nursery', 'religious') THEN landuse ELSE NULL END)) AS landuse,
      ('leisure_' || (CASE WHEN leisure IN ('swimming_pool', 'playground', 'park', 'recreation_ground', 'garden',
                                            'golf_course', 'miniature_golf', 'sports_centre', 'stadium', 'pitch', 'ice_rink',
                                            'track', 'dog_park', 'fitness_station') THEN leisure ELSE NULL END)) AS leisure,
      ('man_made_' || (CASE WHEN man_made IN ('works', 'wastewater_plant', 'water_works') THEN man_made ELSE NULL END)) AS man_made,
      ('natural_' || (CASE WHEN \"natural\" IN ('beach', 'shoal', 'heath', 'grassland', 'wood', 'sand', 'scree', 'shingle', 'bare_rock', 'scrub') THEN \"natural\" ELSE NULL END)) AS \"natural\",
      ('wetland_' || (CASE WHEN \"natural\" IN ('wetland', 'marsh', 'mud') THEN (CASE WHEN \"natural\" IN ('marsh', 'mud') THEN \"natural\" ELSE tags->'wetland' END) ELSE NULL END)) AS wetland,
      ('power_' || (CASE WHEN power IN ('station', 'sub_station', 'substation', 'generator') THEN power ELSE NULL END)) AS power,
      ('tourism_' || (CASE WHEN tourism IN ('camp_site', 'caravan_site', 'picnic_site') THEN tourism ELSE NULL END)) AS tourism,
      ('highway_' || (CASE WHEN highway IN ('services', 'rest_area') THEN highway ELSE NULL END)) AS highway,
      ('railway_' || (CASE WHEN railway = 'station' THEN railway ELSE NULL END)) AS railway,
      CASE WHEN religion IN ('christian', 'jewish', 'muslim') THEN religion ELSE 'INT-generic'::text END AS religion,
      way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
      CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building,
      way_area
    FROM planet_osm_polygon
    WHERE (landuse IS NOT NULL
      OR leisure IS NOT NULL
      OR aeroway IN ('apron', 'aerodrome')
      OR amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'taxi', 'university', 'college', 'school', 'hospital', 'kindergarten',
                     'grave_yard', 'place_of_worship', 'prison', 'clinic', 'ferry_terminal', 'marketplace', 'community_centre', 'social_facility',
                     'arts_centre', 'parking_space', 'bus_station', 'fire_station', 'police')
      OR man_made IN ('works', 'wastewater_plant','water_works')
      OR \"natural\" IN ('beach', 'shoal', 'heath', 'mud', 'marsh', 'wetland', 'grassland', 'wood', 'sand', 'scree', 'shingle', 'bare_rock', 'scrub')
      OR power IN ('station', 'sub_station', 'substation', 'generator')
      OR tourism IN ('camp_site', 'caravan_site', 'picnic_site')
      OR highway IN ('services', 'rest_area')
      OR railway = 'station')
      AND way_area > 1*!pixel_width!::real*!pixel_height!::real
  ) AS landcover
  ORDER BY way_area DESC, feature
) AS features WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "landcover-line"
sql = """
SELECT ST_AsBinary(way) AS geom FROM (SELECT
    way
  FROM planet_osm_line
  WHERE man_made = 'cutline'
) AS landcover_line WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "water-lines-casing"
sql = """
SELECT ST_AsBinary(way) AS geom, \"waterway\", \"int_intermittent\", \"int_tunnel\" FROM (SELECT
    way,
    waterway,
    CASE WHEN tags->'intermittent' IN ('yes')
      OR tags->'seasonal' IN ('yes', 'spring', 'summer', 'autumn', 'winter', 'wet_season', 'dry_season')
      THEN 'yes' ELSE 'no' END AS int_intermittent,
    CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel
  FROM planet_osm_line
  WHERE waterway IN ('stream', 'drain', 'ditch')
) AS water_lines_casing WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "water-lines-low-zoom"
sql = """
SELECT ST_AsBinary(way) AS geom, \"waterway\", \"int_intermittent\" FROM (SELECT
    way,
    waterway,
    CASE WHEN tags->'intermittent' IN ('yes')
      OR tags->'seasonal' IN ('yes', 'spring', 'summer', 'autumn', 'winter', 'wet_season', 'dry_season')
      THEN 'yes' ELSE 'no' END AS int_intermittent
  FROM planet_osm_line
  WHERE waterway = 'river'
) AS water_lines_low_zoom WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "water-lines"
sql = """
SELECT ST_AsBinary(way) AS geom, \"waterway\", \"name\", \"int_intermittent\", \"int_tunnel\", \"bridge\" FROM (SELECT
    way,
    waterway,
    name,
    CASE WHEN tags->'intermittent' IN ('yes')
      OR tags->'seasonal' IN ('yes', 'spring', 'summer', 'autumn', 'winter', 'wet_season', 'dry_season')
      THEN 'yes' ELSE 'no' END AS int_intermittent,
    CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
    'no' AS bridge
  FROM planet_osm_line
  WHERE waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi')
    AND (bridge IS NULL OR bridge NOT IN ('yes', 'aqueduct'))
  ORDER BY COALESCE(layer,0)
) AS water_lines WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "water-areas"
sql = """
SELECT ST_AsBinary(way) AS geom, \"natural\", \"waterway\", \"landuse\", \"name\", \"way_pixels\", \"int_intermittent\" FROM (SELECT
    way,
    \"natural\",
    waterway,
    landuse,
    name,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
    CASE WHEN tags->'intermittent' IN ('yes')
      OR tags->'seasonal' IN ('yes', 'spring', 'summer', 'autumn', 'winter', 'wet_season', 'dry_season')
      OR tags->'basin' IN ('detention', 'infiltration')
      THEN 'yes' ELSE 'no' END AS int_intermittent
  FROM planet_osm_polygon
  WHERE
    (waterway IN ('dock', 'riverbank')
      OR landuse IN ('reservoir', 'basin')
      OR \"natural\" IN ('water', 'glacier'))
    AND building IS NULL
    AND way_area > 1*!pixel_width!::real*!pixel_height!::real
  ORDER BY COALESCE(layer,0), way_area DESC
) AS water_areas WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "landcover-area-symbols"
sql = """
SELECT ST_AsBinary(way) AS geom, \"surface\", \"natural\", \"int_wetland\", \"leaf_type\", \"way_pixels\" FROM (SELECT
    way, surface,
    COALESCE(CASE WHEN landuse = 'forest' THEN 'wood' ELSE NULL END, \"natural\") AS \"natural\",
    CASE WHEN \"natural\" IN ('marsh', 'mud')
        THEN \"natural\"
        ELSE CASE WHEN (\"natural\" = 'wetland' AND NOT tags ? 'wetland')
          THEN 'wetland'
          ELSE CASE WHEN (\"natural\" = 'wetland')
            THEN tags->'wetland'
            ELSE NULL
            END
        END
      END AS int_wetland,
    tags->'leaf_type' AS leaf_type,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
  FROM planet_osm_polygon
  WHERE (\"natural\" IN ('marsh', 'mud', 'wetland', 'wood', 'beach', 'shoal', 'reef', 'scrub', 'sand') OR landuse = 'forest')
    AND building IS NULL
    AND way_area > 1*!pixel_width!::real*!pixel_height!::real
  ORDER BY COALESCE(layer,0), way_area DESC
) AS landcover_area_symbols WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "marinas-area"
sql = """
SELECT ST_AsBinary(way) AS geom FROM (SELECT
    way
  FROM planet_osm_polygon
  WHERE leisure = 'marina'
) AS marinas_area WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "water-barriers-line"
sql = """
SELECT ST_AsBinary(way) AS geom, \"waterway\", \"name\" FROM (SELECT
    way,
    waterway,
    name
  FROM planet_osm_line
  WHERE waterway IN ('dam', 'weir', 'lock_gate')
) AS water_barriers_line WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "water-barriers-poly"
sql = """
SELECT ST_AsBinary(way) AS geom, \"waterway\", \"name\" FROM (SELECT
    way,
    waterway,
    name
  FROM planet_osm_polygon
  WHERE waterway IN ('dam', 'weir', 'lock_gate')
) AS water_barriers_poly WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "springs"
sql = """
SELECT ST_AsBinary(way) AS geom, \"natural\" FROM (SELECT
    way,
    \"natural\"
  FROM
  (SELECT
      ST_PointOnSurface(way) AS way,
      \"natural\"
    FROM planet_osm_polygon
    WHERE way && !bbox!
  UNION ALL
  SELECT
      way,
      \"natural\"
    FROM planet_osm_point
    WHERE way && !bbox!
    ) _
  WHERE \"natural\" IN ('spring')
) AS springs WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "piers-poly"
sql = """
SELECT ST_AsBinary(way) AS geom, \"man_made\" FROM (SELECT
    way, man_made
  FROM planet_osm_polygon
  WHERE man_made IN ('pier', 'breakwater', 'groyne')
) AS piers_poly WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "piers-line"
sql = """
SELECT ST_AsBinary(way) AS geom, \"man_made\" FROM (SELECT
    way, man_made
  FROM planet_osm_line
  WHERE man_made IN ('pier', 'breakwater', 'groyne')
) AS piers_line WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "water-barriers-point"
sql = """
SELECT ST_AsBinary(way) AS geom, \"waterway\" FROM (SELECT
    way, waterway
  FROM planet_osm_point
  WHERE waterway IN ('dam', 'weir', 'lock_gate')
) AS water_barriers_points WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "bridge"
sql = """
SELECT ST_AsBinary(way) AS geom, \"way_pixels\", \"man_made\", \"name\" FROM (SELECT
    way,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
    man_made,
    name
  FROM planet_osm_polygon
  WHERE man_made = 'bridge'
) AS bridge WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "buildings"
sql = """
SELECT ST_AsBinary(way) AS geom, \"building\", \"amenity\", \"aeroway\", \"aerialway\", \"public_transport\" FROM (SELECT
    way,
    building,
    amenity,
    aeroway,
    aerialway,
    tags->'public_transport' as public_transport
  FROM planet_osm_polygon
  WHERE building IS NOT NULL
    AND building != 'no'
    AND way_area > 1*!pixel_width!::real*!pixel_height!::real
  ORDER BY COALESCE(layer,0), way_area DESC
) AS buildings WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "tunnels"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\", \"horse\", \"foot\", \"bicycle\", \"tracktype\", \"int_surface\", \"access\", \"construction\", \"service\", \"link\", \"layernotnull\" FROM (SELECT
    way,
    (CASE WHEN feature IN ('highway_motorway_link', 'highway_trunk_link', 'highway_primary_link', 'highway_secondary_link', 'highway_tertiary_link') THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
    horse,
    foot,
    bicycle,
    tracktype,
    int_surface,
    access,
    construction,
    service,
    link,
    layernotnull
  FROM ( -- subselect that contains both roads and rail
    SELECT
        way,
        'highway_' || highway AS feature, --only motorway to tertiary links are accepted later on
        horse,
        foot,
        bicycle,
        tracktype,
        CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                              'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay', 'ice', 'snow') THEN 'unpaved'
          WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                              'concrete:plates', 'paving_stones', 'metal', 'wood', 'unhewn_cobblestone') THEN 'paved'
          ELSE NULL
        END AS int_surface,
        CASE WHEN access IN ('destination') THEN 'destination'::text
          WHEN access IN ('no', 'private') THEN 'no'::text
          ELSE NULL
        END AS access,
        construction,
        CASE
          WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
          ELSE 'INT-normal'::text
        END AS service,
        CASE
          WHEN highway IN ('motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link') THEN 'yes'
          ELSE 'no'
        END AS link,
        COALESCE(layer,0) AS layernotnull,
        z_order
      FROM planet_osm_line
      WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')
        AND highway IS NOT NULL -- end of road select
    UNION ALL
    SELECT
        way,
        'railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                         WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                         WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service'
                         ELSE railway END) AS feature,
        horse,
        foot,
        bicycle,
        tracktype,
        'null',
        CASE
          WHEN access IN ('destination') THEN 'destination'::text
          WHEN access IN ('no', 'private') THEN 'no'::text
          ELSE NULL
        END AS access,
        construction,
        CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
        'no' AS link,
        COALESCE(layer,0) AS layernotnull,
        z_order
      FROM planet_osm_line
      WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')
        AND (railway NOT IN ('platform') AND railway IS NOT NULL) -- end of rail select
    ) AS features
  ORDER BY
    layernotnull,
    z_order,
    CASE WHEN substring(feature for 8) = 'railway_' THEN 2 ELSE 1 END,
    CASE WHEN feature IN ('railway_INT-preserved-ssy', 'railway_INT-spur-siding-yard', 'railway_tram-service') THEN 0 ELSE 1 END,
    CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
    CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
) AS tunnels WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "landuse-overlay"
sql = """
SELECT ST_AsBinary(way) AS geom, \"landuse\", \"military\", \"way_pixels\" FROM (SELECT
    way,
    landuse,
    military,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
  FROM planet_osm_polygon
  WHERE (landuse = 'military'
    OR military = 'danger_area')
    AND building IS NULL
) AS landuse_overlay WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "tourism-boundary"
sql = """
SELECT ST_AsBinary(way) AS geom, \"way_pixels\", \"name\", \"tourism\" FROM (SELECT
    way,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
    name,
    tourism
  FROM planet_osm_polygon
  WHERE tourism = 'theme_park'
    OR tourism = 'zoo'
) AS tourism_boundary WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "line-barriers"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\" FROM (SELECT
    way, COALESCE(historic, barrier) AS feature
  FROM (SELECT way,
    ('barrier_' || (CASE WHEN barrier IN ('chain', 'city_wall', 'embankment', 'ditch', 'fence', 'guard_rail',
          'handrail', 'hedge', 'kerb', 'retaining_wall', 'wall') THEN barrier ELSE NULL END)) AS barrier,
    ('historic_' || (CASE WHEN historic = 'citywalls' THEN historic ELSE NULL END)) AS historic
    FROM planet_osm_line
    WHERE barrier IN ('chain', 'city_wall', 'embankment', 'ditch', 'fence', 'guard_rail',
          'handrail', 'hedge', 'kerb', 'retaining_wall', 'wall')
      OR historic = 'citywalls'
      AND (waterway IS NULL OR waterway NOT IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi'))
  ) AS features
) AS line_barriers WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "cliffs"
sql = """
SELECT ST_AsBinary(way) AS geom, \"natural\", \"man_made\" FROM (SELECT
    way, \"natural\", man_made
  FROM planet_osm_line
  WHERE \"natural\" = 'cliff' OR man_made = 'embankment'
) AS cliffs WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "area-barriers"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\" FROM (SELECT
    way, COALESCE(historic, barrier) AS feature
  FROM (SELECT way,
    ('barrier_' || (CASE WHEN barrier IN ('chain', 'city_wall', 'embankment', 'ditch', 'fence', 'guard_rail',
          'handrail', 'hedge', 'kerb', 'retaining_wall', 'wall') THEN barrier ELSE NULL END)) AS barrier,
    ('historic_' || (CASE WHEN historic = 'citywalls' THEN historic ELSE NULL END)) AS historic
    FROM planet_osm_polygon
    WHERE (barrier IN ('chain', 'city_wall', 'embankment', 'ditch', 'fence', 'guard_rail',
          'handrail', 'hedge', 'kerb', 'retaining_wall', 'wall')
      OR historic = 'citywalls')
      AND building IS NULL
  ) AS features
) AS area_barriers WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "ferry-routes"
sql = """
SELECT ST_AsBinary(way) AS geom FROM (SELECT
    way
  FROM planet_osm_line
  WHERE route = 'ferry'
    AND osm_id > 0
) AS ferry_routes WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "turning-circle-casing"
sql = """
SELECT ST_AsBinary(way) AS geom, \"int_tc_type\", \"int_tc_service\" FROM (SELECT DISTINCT ON (p.way)
    p.way AS way, l.highway AS int_tc_type,
    CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway')
      THEN 'INT-minor'::text
      ELSE 'INT-normal'::text
    END AS int_tc_service
  FROM planet_osm_point p
    JOIN planet_osm_line l
      ON ST_DWithin(p.way, l.way, 0.1) -- Assumes Mercator
    JOIN (VALUES
      ('tertiary', 1),
      ('unclassified', 2),
      ('residential', 3),
      ('living_street', 4),
      ('service', 5),
      ('track', 6)
      ) AS v (highway, prio)
      ON v.highway=l.highway
  WHERE p.highway = 'turning_circle'
    OR p.highway = 'turning_loop'
  ORDER BY p.way, v.prio
) AS turning_circle_sql WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "highway-area-casing"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\" FROM (SELECT
    way,
    COALESCE((
      'highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'track', 'path', 'platform') THEN highway ELSE NULL END)),
      ('railway_' || (CASE WHEN (railway IN ('platform')
                      AND (tags->'location' NOT IN ('underground') OR (tags->'location') IS NULL)
                      AND (tunnel NOT IN ('yes', 'building_passage') OR tunnel IS NULL)
                      AND (covered NOT IN ('yes') OR covered IS NULL))
                      THEN railway ELSE NULL END))
    ) AS feature
  FROM planet_osm_polygon
  WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'track', 'path', 'platform')
    OR (railway IN ('platform')
        AND (tags->'location' NOT IN ('underground') OR (tags->'location') IS NULL)
        AND (tunnel NOT IN ('yes', 'building_passage') OR tunnel IS NULL)
        AND (covered NOT IN ('yes') OR covered IS NULL))
  ORDER BY COALESCE(layer,0), way_area DESC
) AS highway_area_casing WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "roads-casing"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\", \"horse\", \"foot\", \"bicycle\", \"tracktype\", \"int_surface\", \"access\", \"construction\", \"service\", \"link\", \"layernotnull\" FROM (SELECT
    way,
    (CASE WHEN feature IN ('highway_motorway_link', 'highway_trunk_link', 'highway_primary_link', 'highway_secondary_link', 'highway_tertiary_link') THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
    horse,
    foot,
    bicycle,
    tracktype,
    int_surface,
    access,
    construction,
    service,
    link,
    layernotnull
  FROM ( -- subselect that contains both roads and rail/aero
    SELECT
        way,
        ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on
        horse,
        foot,
        bicycle,
        tracktype,
        CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                              'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay', 'ice', 'snow') THEN 'unpaved'
          WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                              'concrete:plates', 'paving_stones', 'metal', 'wood', 'unhewn_cobblestone') THEN 'paved'
          ELSE NULL
        END AS int_surface,
        CASE WHEN access IN ('destination') THEN 'destination'::text
          WHEN access IN ('no', 'private') THEN 'no'::text
          ELSE NULL
        END AS access,
        construction,
        CASE
          WHEN service IN ('parking_aisle', 'drive-through', 'driveway') OR leisure IN ('slipway') THEN 'INT-minor'::text
          ELSE 'INT-normal'::text
        END AS service,
        CASE
          WHEN highway IN ('motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link') THEN 'yes'
          ELSE 'no'
        END AS link,
        COALESCE(layer,0) AS layernotnull,
        osm_id,
        z_order
      FROM planet_osm_line
      WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
        AND (covered IS NULL OR NOT covered = 'yes')
        AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
        AND highway IS NOT NULL -- end of road select
    UNION ALL
    SELECT
        way,
        ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                             WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                             WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service'
                             ELSE railway END)) AS feature,
        horse,
        foot,
        bicycle,
        tracktype,
        'null',
        CASE
          WHEN access IN ('destination') THEN 'destination'::text
          WHEN access IN ('no', 'private') THEN 'no'::text
          ELSE NULL
        END AS access,
        construction,
        CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') OR leisure IN ('slipway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
        'no' AS link,
        COALESCE(layer,0) AS layernotnull,
        osm_id,
        z_order
      FROM planet_osm_line
      WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
        AND (covered IS NULL OR NOT covered = 'yes')
        AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
        AND railway IS NOT NULL -- end of rail select
    ) AS features
  ORDER BY
    layernotnull,
    z_order,
    CASE WHEN substring(feature for 8) = 'railway_' THEN 2 ELSE 1 END,
    CASE WHEN feature IN ('railway_INT-preserved-ssy', 'railway_INT-spur-siding-yard', 'railway_tram-service') THEN 0 ELSE 1 END,
    CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
    CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END,
    osm_id
) AS roads_sql WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
name = "highway-area-fill"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\" FROM (SELECT
    way,
    COALESCE(
      ('highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street',
                                            'track', 'path', 'platform', 'services') THEN highway ELSE NULL END)),
      ('railway_' || (CASE WHEN (railway IN ('platform')
                      AND (tags->'location' NOT IN ('underground') OR (tags->'location') IS NULL)
                      AND (tunnel NOT IN ('yes', 'building_passage') OR tunnel IS NULL)
                      AND (covered NOT IN ('yes') OR covered IS NULL))
                      THEN railway ELSE NULL END)),
      (('aeroway_' || CASE WHEN aeroway IN ('runway', 'taxiway', 'helipad') THEN aeroway ELSE NULL END))
    ) AS feature
  FROM planet_osm_polygon
  WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'living_street', 'track', 'path', 'platform', 'services')
    OR (railway IN ('platform')
        AND (tags->'location' NOT IN ('underground') OR (tags->'location') IS NULL)
        AND (tunnel NOT IN ('yes', 'building_passage') OR tunnel IS NULL)
        AND (covered NOT IN ('yes') OR covered IS NULL))
    OR aeroway IN ('runway', 'taxiway', 'helipad')
  ORDER BY COALESCE(layer,0), way_area desc
) AS highway_area_fill WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "roads-fill"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\", \"horse\", \"foot\", \"bicycle\", \"tracktype\", \"int_surface\", \"access\", \"construction\", \"service\", \"link\", \"layernotnull\" FROM (SELECT
    way,
    (CASE WHEN feature IN ('highway_motorway_link', 'highway_trunk_link', 'highway_primary_link', 'highway_secondary_link', 'highway_tertiary_link') THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
    horse,
    foot,
    bicycle,
    tracktype,
    int_surface,
    access,
    construction,
    service,
    link,
    layernotnull
  FROM ( -- subselect that contains both roads and rail/aero
    SELECT
        way,
        ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on
        horse,
        foot,
        bicycle,
        tracktype,
        CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                              'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay', 'ice', 'snow') THEN 'unpaved'
          WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                              'concrete:plates', 'paving_stones', 'metal', 'wood', 'unhewn_cobblestone') THEN 'paved'
          ELSE NULL
        END AS int_surface,
        CASE WHEN access IN ('destination') THEN 'destination'::text
          WHEN access IN ('no', 'private') THEN 'no'::text
          ELSE NULL
        END AS access,
        construction,
        CASE
          WHEN service IN ('parking_aisle', 'drive-through', 'driveway') OR leisure IN ('slipway') THEN 'INT-minor'::text
          ELSE 'INT-normal'::text
        END AS service,
        CASE
          WHEN highway IN ('motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link') THEN 'yes'
          ELSE 'no'
        END AS link,
        COALESCE(layer,0) AS layernotnull,
        osm_id,
        z_order
      FROM planet_osm_line
      WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
        AND (covered IS NULL OR NOT covered = 'yes')
        AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
        AND highway IS NOT NULL -- end of road select
    UNION ALL
    SELECT
        way,
        ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                             WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                             WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service'
                             ELSE railway END)) AS feature,
        horse,
        foot,
        bicycle,
        tracktype,
        'null',
        CASE
          WHEN access IN ('destination') THEN 'destination'::text
          WHEN access IN ('no', 'private') THEN 'no'::text
          ELSE NULL
        END AS access,
        construction,
        CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') OR leisure IN ('slipway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
        'no' AS link,
        COALESCE(layer,0) AS layernotnull,
        osm_id,
        z_order
      FROM planet_osm_line
      WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
        AND (covered IS NULL OR NOT covered = 'yes')
        AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
        AND railway IS NOT NULL -- end of rail select
    ) AS features
  ORDER BY
    layernotnull,
    z_order,
    CASE WHEN substring(feature for 8) = 'railway_' THEN 2 ELSE 1 END,
    CASE WHEN feature IN ('railway_INT-preserved-ssy', 'railway_INT-spur-siding-yard', 'railway_tram-service') THEN 0 ELSE 1 END,
    CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
    CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END,
    osm_id
) AS roads_sql WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "turning-circle-fill"
sql = """
SELECT ST_AsBinary(way) AS geom, \"int_tc_type\", \"int_tc_service\" FROM (SELECT DISTINCT ON (p.way)
    p.way AS way, l.highway AS int_tc_type,
    CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway')
      THEN 'INT-minor'::text
      ELSE 'INT-normal'::text
    END AS int_tc_service
  FROM planet_osm_point p
    JOIN planet_osm_line l
      ON ST_DWithin(p.way, l.way, 0.1) -- Assumes Mercator
    JOIN (VALUES
      ('tertiary', 1),
      ('unclassified', 2),
      ('residential', 3),
      ('living_street', 4),
      ('service', 5),
      ('track', 6)
      ) AS v (highway, prio)
      ON v.highway=l.highway
  WHERE p.highway = 'turning_circle'
    OR p.highway = 'turning_loop'
  ORDER BY p.way, v.prio
) AS turning_circle_sql WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "aerialways"
sql = """
SELECT ST_AsBinary(way) AS geom, \"aerialway\", \"name\" FROM (SELECT
    way,
    aerialway,
    name
  FROM planet_osm_line
  WHERE aerialway IS NOT NULL
) AS aerialways WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "roads-low-zoom"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\", \"int_tunnel\", \"link\", \"int_surface\" FROM (SELECT
    way,
    COALESCE(
      ('highway_' || (CASE WHEN highway IN ('motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link')
                             THEN substr(highway, 0, length(highway)-4) ELSE highway end)),
      ('railway_' || (CASE WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                           WHEN railway IN ('rail', 'tram', 'light_rail', 'funicular', 'narrow_gauge') THEN railway ELSE NULL END))
    ) AS feature,
    CASE WHEN tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes' THEN 'yes' ELSE 'no' END AS int_tunnel,
    CASE WHEN highway IN ('motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link') THEN 'yes' ELSE 'no' END AS link,
    CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                          'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay', 'ice', 'snow') THEN 'unpaved'
      WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                          'concrete:plates', 'paving_stones', 'metal', 'wood', 'unhewn_cobblestone') THEN 'paved'
      ELSE NULL
    END AS int_surface
  FROM planet_osm_roads
  WHERE highway IS NOT NULL
    OR (railway IS NOT NULL AND railway != 'preserved'
      AND (service IS NULL OR service NOT IN ('spur', 'siding', 'yard')))
  ORDER BY
    z_order
) AS roads_low_zoom WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "waterway-bridges"
sql = """
SELECT ST_AsBinary(way) AS geom, \"waterway\", \"name\", \"int_intermittent\", \"int_tunnel\", \"bridge\" FROM (SELECT
    way,
    waterway,
    name,
    CASE WHEN tags->'intermittent' IN ('yes')
      OR tags->'seasonal' IN ('yes', 'spring', 'summer', 'autumn', 'winter', 'wet_season', 'dry_season')
      THEN 'yes' ELSE 'no' END AS int_intermittent,
    CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
    'yes' AS bridge
  FROM planet_osm_line
  WHERE waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi')
    AND bridge IN ('yes', 'aqueduct')
  ORDER BY COALESCE(layer,0)
) AS waterway_bridges WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "bridges"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\", \"horse\", \"foot\", \"bicycle\", \"tracktype\", \"int_surface\", \"access\", \"construction\", \"service\", \"link\", \"layernotnull\" FROM (SELECT
    way,
    (CASE WHEN feature IN ('highway_motorway_link', 'highway_trunk_link', 'highway_primary_link', 'highway_secondary_link', 'highway_tertiary_link') THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
    horse,
    foot,
    bicycle,
    tracktype,
    int_surface,
    access,
    construction,
    service,
    link,
    layernotnull
  FROM ( -- subselect that contains both roads and rail/aero
    SELECT
        way,
        'highway_' || highway AS feature, --only motorway to tertiary links are accepted later on
        horse,
        foot,
        bicycle,
        tracktype,
        CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                              'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay', 'ice', 'snow') THEN 'unpaved'
          WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                              'concrete:plates', 'paving_stones', 'metal', 'wood', 'unhewn_cobblestone') THEN 'paved'
          ELSE NULL
        END AS int_surface,
        CASE WHEN access IN ('destination') THEN 'destination'::text
          WHEN access IN ('no', 'private') THEN 'no'::text
          ELSE NULL
        END AS access,
        construction,
        CASE
          WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
          ELSE 'INT-normal'::text
        END AS service,
        CASE
          WHEN highway IN ('motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link') THEN 'yes'
          ELSE 'no'
        END AS link,
        COALESCE(layer,0) AS layernotnull,
        z_order
      FROM planet_osm_line
      WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
        AND highway IS NOT NULL -- end of road select
    UNION ALL
    SELECT
        way,
        'railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                         WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                         WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service'
                         ELSE railway END) AS feature,
        horse,
        foot,
        bicycle,
        tracktype,
        'null',
        CASE
          WHEN access IN ('destination') THEN 'destination'::text
          WHEN access IN ('no', 'private') THEN 'no'::text
          ELSE NULL
        END AS access,
        construction,
        CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
        'no' AS link,
        COALESCE(layer,0) AS layernotnull,
        z_order
      FROM planet_osm_line
      WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
        AND railway IS NOT NULL -- end of rail select
    ) AS features
  ORDER BY
    layernotnull,
    z_order,
    CASE WHEN substring(feature for 8) = 'railway_' THEN 2 ELSE 1 END,
    CASE WHEN feature IN ('railway_INT-preserved-ssy', 'railway_INT-spur-siding-yard', 'railway_tram-service') THEN 0 ELSE 1 END,
    CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
    CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
) AS bridges WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "guideways"
sql = """
SELECT ST_AsBinary(way) AS geom FROM (SELECT
    way
  FROM planet_osm_line
  WHERE highway = 'bus_guideway'
) AS guideways WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "entrances"
sql = """
SELECT ST_AsBinary(way) AS geom, \"entrance\", \"access\" FROM (SELECT
    way,
    tags->'entrance' AS entrance,
    access
  FROM planet_osm_point
  WHERE (tags->'entrance') IS NOT NULL AND
    (tags->'indoor' = 'no'
    OR (tags->'indoor') IS NULL))
AS entrances WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "aeroways"
sql = """
SELECT ST_AsBinary(way) AS geom, \"aeroway\", \"bridge\" FROM (SELECT
    way,
    aeroway,
    bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct') AS bridge
  FROM planet_osm_line
  WHERE aeroway IN ('runway', 'taxiway')
  ORDER BY bridge NULLS FIRST,
    CASE WHEN aeroway = 'runway' THEN 10 ELSE 0 END
) AS aeroways WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "admin-low-zoom"
sql = """
SELECT ST_AsBinary(way) AS geom, \"admin_level\" FROM (SELECT
    way,
    admin_level
  FROM planet_osm_roads
  WHERE boundary = 'administrative'
    AND admin_level IN ('0', '1', '2', '3', '4')
    AND osm_id < 0
  ORDER BY admin_level DESC
) AS admin_low_zoom WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "admin-mid-zoom"
sql = """
SELECT ST_AsBinary(way) AS geom, \"admin_level\" FROM (SELECT
    way,
    admin_level
  FROM planet_osm_roads
  WHERE boundary = 'administrative'
    AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8')
    AND osm_id < 0
  ORDER BY admin_level DESC
) AS admin_mid_zoom WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "admin-high-zoom"
sql = """
SELECT ST_AsBinary(way) AS geom, \"admin_level\" FROM (SELECT
    way,
    admin_level
  FROM planet_osm_roads
  WHERE boundary = 'administrative'
    AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')
    AND osm_id < 0
  ORDER BY admin_level::integer DESC -- With 10 as a valid value, we need to do a numeric ordering, not a text ordering
) AS admin_high_zoom WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "power-minorline"
sql = """
SELECT ST_AsBinary(way) AS geom FROM (SELECT
    way
  FROM planet_osm_line
  WHERE power = 'minor_line'
) AS power_minorline WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "power-line"
sql = """
SELECT ST_AsBinary(way) AS geom FROM (SELECT
    way
  FROM planet_osm_line
  WHERE power = 'line'
    OR (power = 'cable' AND tags->'location' IN ('overground', 'overhead', 'surface', 'outdoor', 'platform'))
) AS power_line WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "protected-areas"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"boundary\", \"protect_class\", \"way_pixels\" FROM (SELECT
    way,
    name,
    boundary,
    tags->'protect_class' AS protect_class,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
  FROM planet_osm_polygon
  WHERE (boundary IN ('aboriginal_lands', 'national_park')
         OR leisure = 'nature_reserve'
         OR (boundary = 'protected_area' AND tags->'protect_class' IN ('1','1a','1b','2','3','4','5','6','7','24','97','98','99')))
    AND building IS NULL
    AND way_area > 1*!pixel_width!::real*!pixel_height!::real
) AS protected_areas WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "trees"
sql = """
SELECT ST_AsBinary(way) AS geom, \"natural\" FROM (SELECT
    way, \"natural\"
  FROM planet_osm_point
  WHERE \"natural\" = 'tree'
UNION ALL
SELECT
    way, \"natural\"
  FROM planet_osm_line
  WHERE \"natural\" = 'tree_row'
) AS trees WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "country-names"
sql = """
SELECT ST_AsBinary(way) AS geom, \"way_pixels\", \"name\" FROM (SELECT
    way,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
    name
  FROM planet_osm_polygon
  WHERE boundary = 'administrative'
    AND admin_level = '2'
    AND name IS NOT NULL
    AND way_area > 100*!pixel_width!::real*!pixel_height!::real
  ORDER BY way_area DESC
) AS country_names WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "capital-names"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"population\", \"dir\" FROM (SELECT
    way,
    name,
    CASE
      WHEN (tags->'population' ~ '^[0-9]{1,8}$') THEN (tags->'population')::INTEGER ELSE 0
    END as population,
    round(ascii(md5(osm_id::text)) / 55) AS dir -- base direction factor on geometry to be consistent across metatiles
  FROM planet_osm_point
  WHERE place IN ('city', 'town', 'village', 'hamlet')
    AND name IS NOT NULL
    AND tags @> 'capital=>yes'
  ORDER BY population DESC
) AS capital_names WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "state-names"
sql = """
SELECT ST_AsBinary(way) AS geom, \"way_pixels\", \"name\", \"ref\" FROM (SELECT
    way,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
    name,
    ref
  FROM planet_osm_polygon
  WHERE boundary = 'administrative'
    AND admin_level = '4'
    AND name IS NOT NULL
    AND way_area > 100*!pixel_width!::real*!pixel_height!::real
  ORDER BY way_area DESC
) AS state_names WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "placenames-medium"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"score\", \"category\", \"dir\" FROM (SELECT
    way,
    name,
    score,
    CASE
      WHEN (place = 'city') THEN 1
      ELSE 2
    END as category,
    round(ascii(md5(osm_id::text)) / 55) AS dir -- base direction factor on geometry to be consistent across metatiles
  FROM
    (SELECT
        osm_id,
        way,
        place,
        name,
        (
          (CASE
            WHEN (tags->'population' ~ '^[0-9]{1,8}$') THEN (tags->'population')::INTEGER
            WHEN (place = 'city') THEN 100000
            WHEN (place = 'town') THEN 1000
            ELSE 1
          END)
          *
          (CASE
            WHEN (tags @> 'capital=>4') THEN 2
            ELSE 1
          END)
        ) AS score
      FROM planet_osm_point
      WHERE place IN ('city', 'town')
        AND name IS NOT NULL
        AND NOT (tags @> 'capital=>yes')
    ) as p
  ORDER BY score DESC, length(name) DESC, name
) AS placenames_medium WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "placenames-small"
sql = """
SELECT ST_AsBinary(way) AS geom, \"place\", \"leisure\", \"name\" FROM (SELECT
    way,
    place,
    leisure,
    name
  FROM planet_osm_point
  WHERE place IN ('village', 'hamlet')
     AND name IS NOT NULL
     AND NOT tags @> 'capital=>yes'
     OR (place IN ('suburb', 'quarter', 'neighbourhood', 'isolated_dwelling', 'farm')
         OR (place IN ('square')
             AND (leisure is NULL OR NOT leisure IN ('park', 'recreation_ground', 'garden')))
     ) AND name IS NOT NULL
  ORDER BY CASE
      WHEN place = 'suburb' THEN 3
      WHEN place = 'village' THEN 4
      WHEN place = 'hamlet' THEN 5
      WHEN place = 'quarter' THEN 6
      WHEN place = 'neighbourhood' THEN 7
      WHEN place = 'isolated_dwelling' THEN 8
      WHEN place = 'farm' THEN 9
      WHEN place = 'square' THEN 10
    END ASC, length(name) DESC, name
) AS placenames_small WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "stations"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"ref\", \"railway\", \"aerialway\", \"station\" FROM (SELECT
    way,
    name,
    ref,
    railway,
    aerialway,
    station
  FROM
  (SELECT
      ST_PointOnSurface(way) AS way,
      name,
      ref,
      railway,
      aerialway,
      tags->'station' AS station,
      way_area
    FROM planet_osm_polygon
    WHERE way && !bbox!
  UNION ALL
  SELECT
      way,
      name,
      ref,
      railway,
      aerialway,
      tags->'station' AS station,
      NULL as way_area
    FROM planet_osm_point
    WHERE way && !bbox!
    ) _
  WHERE railway IN ('station', 'halt', 'tram_stop')
    OR railway = 'subway_entrance' AND way_area IS NULL
    OR aerialway = 'station'
  ORDER BY
    CASE railway
      WHEN 'station' THEN 1
      WHEN 'subway_entrance' THEN 3
      ELSE 2
    END,
    way_area DESC NULLS LAST
) AS stations WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "amenity-points"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"feature\", \"access\", \"score\", \"religion\", \"denomination\", \"generator:source\", \"height\", \"location\", \"icao\", \"iata\", \"office\", \"recycling_type\", \"tower:construction\", \"tower:type\", \"telescope:type\", \"telescope:diameter\", \"castle_type\", \"sport\", \"information\", \"memorial\", \"artwork_type\", \"vending\", \"shop\", \"is_building\", \"operator\", \"ref\", \"way_area\", \"way_pixels\" FROM (SELECT
    *
  FROM
  (SELECT -- This subselect allows filtering on the feature column
      way,
      CONCAT(
        name,
        E'
' || CONCAT( -- by doing this with a || if both the ele and height branches are null, this entire expression is null and only name is used
          CASE
            WHEN (tags ? 'ele') AND tags->'ele' ~ '^-?\\d{1,4}(\\.\\d+)?$'
              AND (\"natural\" IN ('peak', 'volcano', 'saddle')
                OR tourism = 'alpine_hut' OR (tourism = 'information' AND tags->'information' = 'guidepost')
                OR amenity = 'shelter')
            THEN CONCAT(REPLACE(ROUND((tags->'ele')::NUMERIC)::TEXT, '-', U&'\\2212'), U&'\\00A0', 'm') ELSE NULL END,
          CASE
            WHEN (tags ? 'height') AND tags->'height' ~ '^\\d{1,3}(\\.\\d+)?$'
              AND waterway = 'waterfall'
            THEN CONCAT(ROUND((tags->'height')::NUMERIC)::TEXT, U&'\\00A0', 'm') ELSE NULL END
          )
        ) AS name,
      COALESCE(
        'aeroway_' || CASE WHEN aeroway IN ('gate', 'apron', 'helipad', 'aerodrome') THEN aeroway ELSE NULL END,
        'tourism_' || CASE WHEN tourism IN ('alpine_hut', 'apartment', 'artwork', 'camp_site', 'caravan_site', 'chalet', 'gallery', 'guest_house',
                                            'hostel', 'hotel', 'motel', 'museum', 'picnic_site', 'theme_park', 'wilderness_hut',
                                            'zoo') THEN tourism ELSE NULL END,
        'amenity_' || CASE WHEN amenity IN ('arts_centre', 'atm', 'bank', 'bar', 'bbq', 'bicycle_parking', 'bicycle_rental',
                                            'bicycle_repair_station','biergarten', 'boat_rental', 'bureau_de_change', 'bus_station', 'cafe',
                                            'car_rental', 'car_wash', 'casino', 'charging_station', 'childcare', 'cinema', 'clinic', 'college',
                                            'community_centre', 'courthouse', 'dentist', 'doctors', 'drinking_water', 'driving_school', 'embassy',
                                            'fast_food', 'ferry_terminal', 'fire_station', 'food_court', 'fountain', 'fuel', 'grave_yard',
                                            'hospital', 'hunting_stand', 'ice_cream', 'internet_cafe', 'kindergarten', 'library', 'marketplace',
                                            'motorcycle_parking', 'nightclub', 'nursing_home', 'pharmacy', 'place_of_worship', 'police', 'post_box',
                                            'post_office', 'prison', 'pub', 'public_bath', 'public_bookcase', 'recycling', 'restaurant', 'school',
                                            'shelter', 'shower', 'social_facility', 'taxi', 'telephone', 'theatre', 'toilets', 'townhall',
                                            'university', 'vehicle_inspection', 'veterinary') THEN amenity ELSE NULL END,
        'amenity_' || CASE WHEN amenity IN ('waste_disposal') AND way_area IS NOT NULL THEN amenity ELSE NULL END, -- Waste disposal points are rendered in the low priority layer
        'amenity_' || CASE WHEN amenity IN ('parking_entrance')
                                AND tags->'parking' IN ('underground')
                                AND (access IS NULL OR access NOT IN ('private', 'no'))
                                AND way_area IS NULL -- Only parking points are rendered
                          THEN amenity ELSE NULL END,
        'amenity_' || CASE WHEN amenity IN ('parking') AND (tags->'parking' NOT IN ('underground') OR (tags->'parking') IS NULL) THEN amenity ELSE NULL END,
        'amenity_' || CASE WHEN amenity IN ('vending_machine') AND tags->'vending' IN ('excrement_bags', 'parking_tickets', 'public_transport_tickets') THEN amenity ELSE NULL END,
        'advertising_' || CASE WHEN tags->'advertising' in ('column') THEN tags->'advertising' else NULL END,
        'emergency_' || CASE WHEN tags->'emergency' IN ('phone') AND way_area IS NULL THEN tags->'emergency' ELSE NULL END,
        'shop' || CASE WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE '' END,
        'leisure_' || CASE WHEN leisure IN ('amusement_arcade', 'beach_resort', 'bird_hide', 'bowling_alley', 'dog_park', 'firepit', 'fishing',
                                            'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'ice_rink', 'marina', 'miniature_golf',
                                            'nature_reserve', 'outdoor_seating', 'park', 'picnic_table', 'pitch', 'playground', 'recreation_ground',
                                            'sauna', 'slipway', 'sports_centre', 'stadium', 'swimming_area', 'swimming_pool', 'track', 'water_park') THEN leisure ELSE NULL END,
        'power_' || CASE WHEN power IN ('plant', 'station', 'generator', 'sub_station', 'substation') THEN power ELSE NULL END,
        'man_made_' || CASE WHEN (man_made IN ('chimney', 'communications_tower', 'crane', 'lighthouse', 'mast', 'obelisk', 'silo', 'storage_tank',
                                               'telescope', 'tower', 'wastewater_plant', 'water_tower', 'water_works', 'windmill', 'works')
                                    AND (tags->'location' NOT IN ('roof', 'rooftop') OR NOT (tags ? 'location'))) THEN man_made ELSE NULL END,
        'landuse_' || CASE WHEN landuse IN ('reservoir', 'basin', 'recreation_ground', 'village_green', 'quarry', 'vineyard', 'orchard', 'cemetery',
                                            'residential', 'garages', 'meadow', 'grass', 'allotments', 'forest', 'farmyard', 'farmland',
                                            'greenhouse_horticulture', 'retail', 'industrial', 'railway', 'commercial', 'brownfield', 'landfill',
                                            'construction', 'military', 'plant_nursery') THEN landuse ELSE NULL END,
        'natural_' || CASE WHEN \"natural\" IN ('peak', 'volcano', 'saddle', 'cave_entrance') AND way_area IS NULL THEN \"natural\" ELSE NULL END,
        'natural_' || CASE WHEN \"natural\" IN ('wood', 'peak', 'volcano', 'saddle', 'cave_entrance', 'water', 'mud', 'wetland', 'marsh', 'bay', 'spring',
                                              'scree', 'shingle', 'bare_rock', 'sand', 'heath', 'grassland', 'scrub', 'beach', 'glacier', 'tree', 'strait', 'cape')
                                              THEN \"natural\" ELSE NULL END,
        'waterway_' || CASE WHEN \"waterway\" IN ('waterfall') AND way_area IS NULL THEN waterway ELSE NULL END,
        'place_' || CASE WHEN place IN ('island', 'islet') THEN place ELSE NULL END,
        'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site', 'fort', 'castle', 'manor', 'city_gate')
                      THEN historic ELSE NULL END,
        'military_'|| CASE WHEN military IN ('danger_area', 'bunker') THEN military ELSE NULL END,
        'highway_' || CASE WHEN highway IN ('services', 'rest_area', 'bus_stop', 'elevator', 'traffic_signals') THEN highway ELSE NULL END,
        'highway_'|| CASE WHEN tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones' AND way_area IS NULL THEN 'ford' ELSE NULL END,
        'boundary_' || CASE WHEN boundary IN ('aboriginal_lands', 'national_park')
                                  OR (boundary = 'protected_area' AND tags->'protect_class' IN ('1','1a','1b','2','3','4','5','6','7','24','97','98','99'))
                                  THEN boundary ELSE NULL END,
        'tourism_' || CASE WHEN tourism IN ('information') THEN tourism ELSE NULL END,
        'office' || CASE WHEN tags->'office' IN ('no', 'vacant', 'closed', 'disused', 'empty') OR (tags->'office') IS NULL THEN NULL ELSE '' END,
        'barrier_' || CASE WHEN barrier IN ('toll_booth') AND way_area IS NULL THEN barrier ELSE NULL END,
        'waterway_' || CASE WHEN waterway IN ('dam', 'weir', 'dock') THEN waterway ELSE NULL END,
        'man_made_' || CASE WHEN man_made IN ('cross') AND way_area IS NULL THEN man_made ELSE NULL END,
        'historic_' || CASE WHEN historic IN ('wayside_cross', 'wayside_shrine') AND way_area IS NULL THEN historic ELSE NULL END,
        'tourism_' || CASE WHEN tourism IN ('viewpoint', 'attraction') THEN tourism ELSE NULL END,
        'place_' || CASE WHEN place IN ('locality') AND way_area IS NULL THEN place ELSE NULL END
      ) AS feature,
      access,
      CASE
        WHEN \"natural\" IN ('peak', 'volcano', 'saddle') THEN
          CASE
            WHEN tags->'ele' ~ '^-?\\d{1,4}(\\.\\d+)?$' THEN (tags->'ele')::NUMERIC
            ELSE NULL
          END
        WHEN \"waterway\" IN ('waterfall') THEN
          CASE
            WHEN tags->'height' ~ '^\\d{1,3}(\\.\\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\\d{1,3}(\\.\\d+)?)( m)?$'))::NUMERIC
            ELSE NULL
          END
        ELSE NULL
      END AS score,
      religion,
      tags->'denomination' as denomination,
      tags->'generator:source' as \"generator:source\",
      CASE
        WHEN (man_made IN ('mast', 'tower', 'chimney', 'crane') AND (tags->'location' NOT IN ('roof', 'rooftop') OR (tags->'location') IS NULL))
              OR waterway IN ('waterfall') THEN
          CASE
            WHEN tags->'height' ~ '^\\d{1,3}(\\.\\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\\d{1,3}(\\.\\d+)?)( m)?$'))::NUMERIC
            ELSE NULL
          END
        ELSE NULL
      END AS height,
      tags->'location' as location,
      tags->'icao' as icao,
      tags->'iata' as iata,
      tags->'office' as office,
      tags->'recycling_type' as recycling_type,
      tags->'tower:construction' as \"tower:construction\",
      tags->'tower:type' as \"tower:type\",
      tags->'telescope:type' as \"telescope:type\",
      CASE
        WHEN man_made IN ('telescope') THEN
          CASE
            WHEN tags->'telescope:diameter' ~ '^-?\\d{1,4}(\\.\\d+)?$' THEN (tags->'telescope:diameter')::NUMERIC
            ELSE NULL
          END
        ELSE NULL
      END AS \"telescope:diameter\",
      tags->'castle_type' as castle_type,
      tags->'sport' as sport,
      tags->'information' as information,
      tags->'memorial' as memorial,
      tags->'artwork_type' as artwork_type,
      tags->'vending' as vending,
      CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'bed', 'bookmaker', 'books', 'butcher', 'carpet', 'clothes', 'computer',
                        'confectionery', 'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fabric', 'fishmonger', 'florist',
                        'garden_centre', 'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet',
                        'photo', 'photo_studio', 'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk',
                        'mobile_phone', 'motorcycle', 'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery',
                        'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery',
                        'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor',
                        'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea', 'coffee', 'tyres', 'pastry', 'chocolate',
                        'music', 'medical_supply', 'dairy', 'video_games', 'houseware', 'ticket', 'charity', 'second_hand',
                        'interior_decoration', 'video', 'paint', 'massage', 'trade', 'wholesale') THEN shop
                        ELSE 'other' END AS shop,
      CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building,
      tags -> 'operator' AS operator,
      ref,
      way_area,
      way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
    FROM
      (SELECT
          ST_PointOnSurface(way) AS way,
          name,
          access,
          aeroway,
          amenity,
          barrier,
          boundary,
          building,
          highway,
          historic,
          landuse,
          leisure,
          man_made,
          military,
          \"natural\",
          place,
          power,
          ref,
          religion,
          shop,
          tourism,
          waterway,
          tags,
          way_area
        FROM planet_osm_polygon
        WHERE way && !bbox!
      UNION ALL
      SELECT
          way,
          name,
          access,
          aeroway,
          amenity,
          barrier,
          boundary,
          building,
          highway,
          historic,
          landuse,
          leisure,
          man_made,
          military,
          \"natural\",
          place,
          power,
          ref,
          religion,
          shop,
          tourism,
          waterway,
          tags,
          NULL AS way_area
        FROM planet_osm_point
        WHERE way && !bbox!
      ) _
    ) AS features
  WHERE feature IS NOT NULL
  ORDER BY score DESC NULLS LAST,
    way_pixels DESC NULLS LAST
  ) AS amenity_points WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "amenity-line"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"layer\", \"feature\" FROM (SELECT
  way,
  name,
  layer,
  COALESCE(
   'highway_' || CASE WHEN tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones' THEN 'ford' ELSE NULL END,
   'leisure_' || CASE WHEN leisure IN ('slipway', 'track') THEN leisure ELSE NULL END,
   'attraction_' || CASE WHEN tags @> 'attraction=>water_slide' THEN 'water_slide' ELSE NULL END
    ) AS feature
  FROM planet_osm_line
  -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
  WHERE tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones'
    OR leisure IN ('slipway', 'track')
    OR tags @> 'attraction=>water_slide'
  ORDER BY COALESCE(layer,0)
) AS amenity_line WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "power-towers"
sql = """
SELECT ST_AsBinary(way) AS geom, \"power\" FROM (SELECT
    way,
    power
FROM planet_osm_point
WHERE power IN ('tower', 'pole')
ORDER BY
  CASE
    WHEN power = 'tower' THEN 1
    WHEN power = 'pole' THEN 2
    ELSE NULL
  END
) AS power_towers WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "roads-text-ref-low-zoom"
sql = """
SELECT ST_AsBinary(way) AS geom, \"highway\", \"height\", \"width\", \"refs\" FROM (SELECT
    way,
    highway,
    height,
    width,
    refs
  FROM (
    SELECT
        way,
        osm_id,
        highway,
        array_length(refs,1) AS height,
        (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
        array_to_string(refs, E'
') AS refs
      FROM (
        SELECT
            way,
            osm_id,
            highway,
            string_to_array(ref, ';') AS refs
        FROM planet_osm_roads
          WHERE highway IN ('motorway', 'trunk', 'primary', 'secondary')
          AND ref IS NOT NULL
      ) AS p) AS q
  WHERE height <= 4 AND width <= 11
  ORDER BY
    CASE
      WHEN highway = 'motorway' THEN 38
      WHEN highway = 'trunk' THEN 37
      WHEN highway = 'primary' THEN 36
      WHEN highway = 'secondary' THEN 35
      ELSE NULL
    END DESC NULLS LAST,
    height DESC,
    width DESC,
    refs,
    osm_id
) AS roads_text_ref_low_zoom WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "junctions"
sql = """
SELECT ST_AsBinary(way) AS geom, \"highway\", \"junction\", \"ref\", \"name\", \"way_pixels\" FROM (SELECT
    way,
    highway,
    junction,
    ref,
    name,
    NULL AS way_pixels
  FROM planet_osm_point
  WHERE highway = 'motorway_junction' OR highway = 'traffic_signals' OR junction = 'yes'
UNION ALL
  SELECT
    way,
    highway,
    junction,
    ref,
    name,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
  FROM planet_osm_polygon
  WHERE junction = 'yes'
  ORDER BY way_pixels DESC NULLS LAST
) AS junctions WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "bridge-text"
sql = """
SELECT ST_AsBinary(way) AS geom, \"way_pixels\", \"man_made\", \"name\" FROM (SELECT
    way,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
    man_made,
    name
  FROM planet_osm_polygon
  WHERE man_made = 'bridge'
  ORDER BY way_area DESC
) AS bridge_text WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "roads-text-ref"
sql = """
SELECT ST_AsBinary(way) AS geom, \"highway\", \"height\", \"width\", \"refs\" FROM (SELECT
    way,
    highway,
    height,
    width,
    refs
  FROM (
    SELECT
        osm_id,
        way,
        highway,
        array_length(refs,1) AS height,
        (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
        array_to_string(refs, E'
') AS refs
      FROM (
        SELECT
            osm_id,
            way,
            COALESCE(
              CASE WHEN highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential', 'track') THEN highway ELSE NULL END,
              CASE WHEN aeroway IN ('runway', 'taxiway') THEN aeroway ELSE NULL END
            ) AS highway,
            string_to_array(ref, ';') AS refs
          FROM planet_osm_line
          WHERE (highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential', 'track') OR aeroway IN ('runway', 'taxiway'))
            AND ref IS NOT NULL
      ) AS p) AS q
  WHERE height <= 4 AND width <= 11
  ORDER BY
    CASE
      WHEN highway = 'motorway' THEN 38
      WHEN highway = 'trunk' THEN 37
      WHEN highway = 'primary' THEN 36
      WHEN highway = 'secondary' THEN 35
      WHEN highway = 'tertiary' THEN 34
      WHEN highway = 'unclassified' THEN 33
      WHEN highway = 'residential' THEN 32
      WHEN highway = 'track' THEN 30
      WHEN highway = 'runway' THEN 6
      WHEN highway = 'taxiway' THEN 5
      ELSE NULL
    END DESC NULLS LAST,
    height DESC,
    width DESC,
    refs,
    osm_id
) AS roads_text_ref WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "roads-area-text-name"
sql = """
SELECT ST_AsBinary(way) AS geom, \"way_pixels\", \"highway\", \"place\", \"leisure\", \"name\" FROM (SELECT
    way,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
    highway,
    place,
    leisure,
    name
  FROM planet_osm_polygon
  WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street', 'track', 'path', 'platform')
    OR (railway IN ('platform')
        AND (tags->'location' NOT IN ('underground') OR (tags->'location') IS NULL)
        AND (tunnel NOT IN ('yes', 'building_passage') OR tunnel IS NULL)
        AND (covered NOT IN ('yes') OR covered IS NULL))
    OR (place IN ('square')
        AND (leisure IS NULL OR NOT leisure IN ('park', 'recreation_ground', 'garden')))
    AND name IS NOT NULL
  ORDER BY way_area DESC
) AS roads_area_text_name WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "roads-text-name"
sql = """
SELECT ST_AsBinary(way) AS geom, \"highway\", \"tunnel\", \"construction\", \"name\", \"oneway\", \"horse\", \"bicycle\" FROM (SELECT
    way,
    CASE WHEN substr(highway, length(highway)-4, 5) = '_link' THEN substr(highway, 0, length(highway)-4) ELSE highway END,
    CASE WHEN (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes') THEN 'yes' ELSE 'no' END AS tunnel,
    construction,
    name,
    CASE
      WHEN oneway IN ('yes', '-1') THEN oneway
      WHEN junction IN ('roundabout') AND (oneway IS NULL OR NOT oneway IN ('no', 'reversible')) THEN 'yes'
      ELSE NULL
    END AS oneway,
    horse, bicycle
  FROM planet_osm_line l
  JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
      ('motorway', 380),
      ('trunk', 370),
      ('primary', 360),
      ('secondary', 350),
      ('tertiary', 340),
      ('residential', 330),
      ('unclassified', 330),
      ('road', 330),
      ('living_street', 320),
      ('pedestrian', 310),
      ('raceway', 300),
      ('motorway_link', 240),
      ('trunk_link', 230),
      ('primary_link', 220),
      ('secondary_link', 210),
      ('tertiary_link', 200),
      ('service', 150),
      ('construction', 10)
    ) AS ordertable (highway, prio)
    USING (highway)
  WHERE highway IN ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 'secondary_link', 'tertiary',
                    'tertiary_link', 'residential', 'unclassified', 'road', 'service', 'pedestrian', 'raceway', 'living_street', 'construction')
    AND (name IS NOT NULL
      OR oneway IN ('yes', '-1')
      OR junction IN ('roundabout'))
  ORDER BY
    z_order DESC, -- put important roads first
    COALESCE(layer, 0), -- put top layered roads first
    length(name) DESC, -- Try to fit big labels in first
    name DESC, -- Force a consistent ordering between differently named streets
    l.osm_id DESC -- Force an ordering for streets of the same name, e.g. dualized roads
) AS roads_text_name WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "paths-text-name"
sql = """
SELECT ST_AsBinary(way) AS geom, \"highway\", \"construction\", \"name\", \"oneway\", \"horse\", \"bicycle\" FROM (SELECT
    way,
    highway,
    construction,
    name,
    CASE
      WHEN oneway IN ('yes', '-1') THEN oneway
      WHEN junction IN ('roundabout') AND (oneway IS NULL OR NOT oneway IN ('no', 'reversible')) THEN 'yes'
      ELSE NULL
    END AS oneway,
    horse,
    bicycle
  FROM planet_osm_line
  WHERE highway IN ('bridleway', 'footway', 'cycleway', 'path', 'track', 'steps', 'construction')
    AND (name IS NOT NULL
      OR oneway IN ('yes', '-1')
      OR junction IN ('roundabout'))
) AS paths_text_name WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "railways-text-name"
sql = """
SELECT ST_AsBinary(way) AS geom, \"railway\", \"tunnel\", \"highspeed\", \"usage\", \"construction\", \"name\" FROM (SELECT
    way,
    CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
         WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
         WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END AS railway,
    CASE WHEN (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes') THEN 'yes' ELSE 'no' END AS tunnel,
    tags->'highspeed' as highspeed,
    tags->'usage' as usage,
    construction,
    name
  FROM planet_osm_line l
  WHERE railway IN ('rail', 'subway', 'narrow_gauge', 'light_rail', 'preserved', 'funicular',
                    'monorail', 'miniature', 'tram', 'disused', 'construction')
    AND (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
    AND highway IS NULL -- Prevent duplicate rendering
    AND name IS NOT NULL
  ORDER BY
    z_order DESC, -- put important rails first
    COALESCE(layer, 0), -- put top layered rails first
    length(name) DESC, -- Try to fit big labels in first
    name DESC, -- Force a consistent ordering between differently named railways
    l.osm_id DESC -- Force an ordering for railways of the same name, e.g. dualized rails
) AS railways_text_name WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "text-poly-low-zoom"
sql = """
SELECT ST_AsBinary(way) AS geom, \"way_pixels\", \"feature\", \"name\", \"is_building\" FROM (SELECT
    way,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
    COALESCE(
      'landuse_' || CASE WHEN landuse IN ('forest', 'military', 'farmland') THEN landuse ELSE NULL END,
      'military_' || CASE WHEN military IN ('danger_area') THEN military ELSE NULL END,
      'natural_' || CASE WHEN \"natural\" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock',
                                            'water', 'bay', 'strait') THEN \"natural\" ELSE NULL END,
      'place_' || CASE WHEN place IN ('island') THEN place ELSE NULL END,
      'boundary_' || CASE WHEN (boundary = 'protected_area' AND tags->'protect_class' = '24') THEN 'aboriginal_lands'
                          WHEN boundary IN ('aboriginal_lands', 'national_park')
                               OR (boundary = 'protected_area' AND tags->'protect_class' IN ('1','1a','1b','2','3','4','5','6','7','97','98','99'))
                               THEN boundary ELSE NULL END,
      'leisure_' || CASE WHEN leisure IN ('nature_reserve') THEN leisure ELSE NULL END
    ) AS feature,
    name,
    CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building -- always no with the where conditions
  FROM planet_osm_polygon
  WHERE (landuse IN ('forest', 'military', 'farmland')
      OR military IN ('danger_area')
      OR \"natural\" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock', 'water', 'bay', 'strait')
      OR \"place\" IN ('island')
      OR boundary IN ('aboriginal_lands', 'national_park')
      OR (boundary = 'protected_area' AND tags->'protect_class' IN ('1','1a','1b','2','3','4','5','6','7','24','97','98','99'))
      OR leisure IN ('nature_reserve'))
    AND building IS NULL
    AND name IS NOT NULL
  ORDER BY way_area DESC
) AS text_poly_low_zoom WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "text-line"
sql = """
SELECT ST_AsBinary(way) AS geom, \"way_pixels\", \"feature\", \"access\", \"name\", \"operator\", \"ref\", \"way_area\", \"is_building\" FROM (SELECT
  way,
    NULL as way_pixels,
    COALESCE('man_made_' || man_made, 'waterway_' || waterway, 'natural_' || \"natural\") AS feature,
    access,
    name,
    tags->'operator' as operator,
    ref,
    NULL AS way_area,
    CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building
  FROM planet_osm_line
  WHERE (man_made IN ('pier', 'breakwater', 'groyne', 'embankment')
      OR waterway IN ('dam', 'weir')
      OR \"natural\" IN ('cliff'))
    AND name IS NOT NULL
) AS text_line WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "text-point"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"feature\", \"access\", \"score\", \"religion\", \"denomination\", \"generator:source\", \"height\", \"location\", \"icao\", \"iata\", \"office\", \"recycling_type\", \"tower:construction\", \"tower:type\", \"telescope:type\", \"telescope:diameter\", \"castle_type\", \"sport\", \"information\", \"memorial\", \"artwork_type\", \"vending\", \"shop\", \"is_building\", \"operator\", \"ref\", \"way_area\", \"way_pixels\" FROM (SELECT
    *
  FROM
  (SELECT -- This subselect allows filtering on the feature column
      way,
      CONCAT(
        name,
        E'
' || CONCAT( -- by doing this with a || if both the ele and height branches are null, this entire expression is null and only name is used
          CASE
            WHEN (tags ? 'ele') AND tags->'ele' ~ '^-?\\d{1,4}(\\.\\d+)?$'
              AND (\"natural\" IN ('peak', 'volcano', 'saddle')
                OR tourism = 'alpine_hut' OR (tourism = 'information' AND tags->'information' = 'guidepost')
                OR amenity = 'shelter')
            THEN CONCAT(REPLACE(ROUND((tags->'ele')::NUMERIC)::TEXT, '-', U&'\\2212'), U&'\\00A0', 'm') ELSE NULL END,
          CASE
            WHEN (tags ? 'height') AND tags->'height' ~ '^\\d{1,3}(\\.\\d+)?$'
              AND waterway = 'waterfall'
            THEN CONCAT(ROUND((tags->'height')::NUMERIC)::TEXT, U&'\\00A0', 'm') ELSE NULL END
          )
        ) AS name,
      COALESCE(
        'aeroway_' || CASE WHEN aeroway IN ('gate', 'apron', 'helipad', 'aerodrome') THEN aeroway ELSE NULL END,
        'tourism_' || CASE WHEN tourism IN ('alpine_hut', 'apartment', 'artwork', 'camp_site', 'caravan_site', 'chalet', 'gallery', 'guest_house',
                                            'hostel', 'hotel', 'motel', 'museum', 'picnic_site', 'theme_park', 'wilderness_hut',
                                            'zoo') THEN tourism ELSE NULL END,
        'amenity_' || CASE WHEN amenity IN ('arts_centre', 'atm', 'bank', 'bar', 'bbq', 'bicycle_parking', 'bicycle_rental',
                                            'bicycle_repair_station','biergarten', 'boat_rental', 'bureau_de_change', 'bus_station', 'cafe',
                                            'car_rental', 'car_wash', 'casino', 'charging_station', 'childcare', 'cinema', 'clinic', 'college',
                                            'community_centre', 'courthouse', 'dentist', 'doctors', 'drinking_water', 'driving_school', 'embassy',
                                            'fast_food', 'ferry_terminal', 'fire_station', 'food_court', 'fountain', 'fuel', 'grave_yard',
                                            'hospital', 'hunting_stand', 'ice_cream', 'internet_cafe', 'kindergarten', 'library', 'marketplace',
                                            'motorcycle_parking', 'nightclub', 'nursing_home', 'pharmacy', 'place_of_worship', 'police', 'post_box',
                                            'post_office', 'prison', 'pub', 'public_bath', 'public_bookcase', 'recycling', 'restaurant', 'school',
                                            'shelter', 'shower', 'social_facility', 'taxi', 'telephone', 'theatre', 'toilets', 'townhall',
                                            'university', 'vehicle_inspection', 'veterinary') THEN amenity ELSE NULL END,
        'amenity_' || CASE WHEN amenity IN ('waste_disposal') AND way_area IS NOT NULL THEN amenity ELSE NULL END, -- Waste disposal points are rendered in the low priority layer
        'amenity_' || CASE WHEN amenity IN ('parking_entrance')
                                AND tags->'parking' IN ('underground')
                                AND (access IS NULL OR access NOT IN ('private', 'no'))
                                AND way_area IS NULL -- Only parking points are rendered
                          THEN amenity ELSE NULL END,
        'amenity_' || CASE WHEN amenity IN ('parking') AND (tags->'parking' NOT IN ('underground') OR (tags->'parking') IS NULL) THEN amenity ELSE NULL END,
        'amenity_' || CASE WHEN amenity IN ('vending_machine') AND tags->'vending' IN ('excrement_bags', 'parking_tickets', 'public_transport_tickets') THEN amenity ELSE NULL END,
        'advertising_' || CASE WHEN tags->'advertising' in ('column') THEN tags->'advertising' else NULL END,
        'emergency_' || CASE WHEN tags->'emergency' IN ('phone') AND way_area IS NULL THEN tags->'emergency' ELSE NULL END,
        'shop' || CASE WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE '' END,
        'leisure_' || CASE WHEN leisure IN ('amusement_arcade', 'beach_resort', 'bird_hide', 'bowling_alley', 'dog_park', 'firepit', 'fishing',
                                            'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'ice_rink', 'marina', 'miniature_golf',
                                            'nature_reserve', 'outdoor_seating', 'park', 'picnic_table', 'pitch', 'playground', 'recreation_ground',
                                            'sauna', 'slipway', 'sports_centre', 'stadium', 'swimming_area', 'swimming_pool', 'track', 'water_park') THEN leisure ELSE NULL END,
        'power_' || CASE WHEN power IN ('plant', 'station', 'generator', 'sub_station', 'substation') THEN power ELSE NULL END,
        'man_made_' || CASE WHEN (man_made IN ('chimney', 'communications_tower', 'crane', 'lighthouse', 'mast', 'obelisk', 'silo', 'storage_tank',
                                               'telescope', 'tower', 'wastewater_plant', 'water_tower', 'water_works', 'windmill', 'works')
                                    AND (tags->'location' NOT IN ('roof', 'rooftop') OR NOT (tags ? 'location'))) THEN man_made ELSE NULL END,
        'landuse_' || CASE WHEN landuse IN ('reservoir', 'basin', 'recreation_ground', 'village_green', 'quarry', 'vineyard', 'orchard', 'cemetery',
                                            'residential', 'garages', 'meadow', 'grass', 'allotments', 'forest', 'farmyard', 'farmland',
                                            'greenhouse_horticulture', 'retail', 'industrial', 'railway', 'commercial', 'brownfield', 'landfill',
                                            'construction', 'military', 'plant_nursery') THEN landuse ELSE NULL END,
        'natural_' || CASE WHEN \"natural\" IN ('peak', 'volcano', 'saddle', 'cave_entrance') AND way_area IS NULL THEN \"natural\" ELSE NULL END,
        'natural_' || CASE WHEN \"natural\" IN ('wood', 'peak', 'volcano', 'saddle', 'cave_entrance', 'water', 'mud', 'wetland', 'marsh', 'bay', 'spring',
                                              'scree', 'shingle', 'bare_rock', 'sand', 'heath', 'grassland', 'scrub', 'beach', 'glacier', 'tree', 'strait', 'cape')
                                              THEN \"natural\" ELSE NULL END,
        'waterway_' || CASE WHEN \"waterway\" IN ('waterfall') AND way_area IS NULL THEN waterway ELSE NULL END,
        'place_' || CASE WHEN place IN ('island', 'islet') THEN place ELSE NULL END,
        'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site', 'fort', 'castle', 'manor', 'city_gate')
                      THEN historic ELSE NULL END,
        'military_'|| CASE WHEN military IN ('danger_area', 'bunker') THEN military ELSE NULL END,
        'highway_' || CASE WHEN highway IN ('services', 'rest_area', 'bus_stop', 'elevator', 'traffic_signals') THEN highway ELSE NULL END,
        'highway_'|| CASE WHEN tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones' AND way_area IS NULL THEN 'ford' ELSE NULL END,
        'boundary_' || CASE WHEN boundary IN ('aboriginal_lands', 'national_park')
                                  OR (boundary = 'protected_area' AND tags->'protect_class' IN ('1','1a','1b','2','3','4','5','6','7','24','97','98','99'))
                                  THEN boundary ELSE NULL END,
        'tourism_' || CASE WHEN tourism IN ('information') THEN tourism ELSE NULL END,
        'office' || CASE WHEN tags->'office' IN ('no', 'vacant', 'closed', 'disused', 'empty') OR (tags->'office') IS NULL THEN NULL ELSE '' END,
        'barrier_' || CASE WHEN barrier IN ('toll_booth') AND way_area IS NULL THEN barrier ELSE NULL END,
        'waterway_' || CASE WHEN waterway IN ('dam', 'weir', 'dock') THEN waterway ELSE NULL END,
        'man_made_' || CASE WHEN man_made IN ('cross') AND way_area IS NULL THEN man_made ELSE NULL END,
        'historic_' || CASE WHEN historic IN ('wayside_cross', 'wayside_shrine') AND way_area IS NULL THEN historic ELSE NULL END,
        'tourism_' || CASE WHEN tourism IN ('viewpoint', 'attraction') THEN tourism ELSE NULL END,
        'place_' || CASE WHEN place IN ('locality') AND way_area IS NULL THEN place ELSE NULL END
      ) AS feature,
      access,
      CASE
        WHEN \"natural\" IN ('peak', 'volcano', 'saddle') THEN
          CASE
            WHEN tags->'ele' ~ '^-?\\d{1,4}(\\.\\d+)?$' THEN (tags->'ele')::NUMERIC
            ELSE NULL
          END
        WHEN \"waterway\" IN ('waterfall') THEN
          CASE
            WHEN tags->'height' ~ '^\\d{1,3}(\\.\\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\\d{1,3}(\\.\\d+)?)( m)?$'))::NUMERIC
            ELSE NULL
          END
        ELSE NULL
      END AS score,
      religion,
      tags->'denomination' as denomination,
      tags->'generator:source' as \"generator:source\",
      CASE
        WHEN (man_made IN ('mast', 'tower', 'chimney', 'crane') AND (tags->'location' NOT IN ('roof', 'rooftop') OR (tags->'location') IS NULL))
              OR waterway IN ('waterfall') THEN
          CASE
            WHEN tags->'height' ~ '^\\d{1,3}(\\.\\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\\d{1,3}(\\.\\d+)?)( m)?$'))::NUMERIC
            ELSE NULL
          END
        ELSE NULL
      END AS height,
      tags->'location' as location,
      tags->'icao' as icao,
      tags->'iata' as iata,
      tags->'office' as office,
      tags->'recycling_type' as recycling_type,
      tags->'tower:construction' as \"tower:construction\",
      tags->'tower:type' as \"tower:type\",
      tags->'telescope:type' as \"telescope:type\",
      CASE
        WHEN man_made IN ('telescope') THEN
          CASE
            WHEN tags->'telescope:diameter' ~ '^-?\\d{1,4}(\\.\\d+)?$' THEN (tags->'telescope:diameter')::NUMERIC
            ELSE NULL
          END
        ELSE NULL
      END AS \"telescope:diameter\",
      tags->'castle_type' as castle_type,
      tags->'sport' as sport,
      tags->'information' as information,
      tags->'memorial' as memorial,
      tags->'artwork_type' as artwork_type,
      tags->'vending' as vending,
      CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'bed', 'bookmaker', 'books', 'butcher', 'carpet', 'clothes', 'computer',
                        'confectionery', 'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fabric', 'fishmonger', 'florist',
                        'garden_centre', 'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet',
                        'photo', 'photo_studio', 'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk',
                        'mobile_phone', 'motorcycle', 'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery',
                        'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery',
                        'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor',
                        'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea', 'coffee', 'tyres', 'pastry', 'chocolate',
                        'music', 'medical_supply', 'dairy', 'video_games', 'houseware', 'ticket', 'charity', 'second_hand',
                        'interior_decoration', 'video', 'paint', 'massage', 'trade', 'wholesale') THEN shop
                        ELSE 'other' END AS shop,
      CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building,
      tags -> 'operator' AS operator,
      ref,
      way_area,
      way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
    FROM
      (SELECT
          ST_PointOnSurface(way) AS way,
          name,
          access,
          aeroway,
          amenity,
          barrier,
          boundary,
          building,
          highway,
          historic,
          landuse,
          leisure,
          man_made,
          military,
          \"natural\",
          place,
          power,
          ref,
          religion,
          shop,
          tourism,
          waterway,
          tags,
          way_area
        FROM planet_osm_polygon
        WHERE way && !bbox!
      UNION ALL
      SELECT
          way,
          name,
          access,
          aeroway,
          amenity,
          barrier,
          boundary,
          building,
          highway,
          historic,
          landuse,
          leisure,
          man_made,
          military,
          \"natural\",
          place,
          power,
          ref,
          religion,
          shop,
          tourism,
          waterway,
          tags,
          NULL AS way_area
        FROM planet_osm_point
        WHERE way && !bbox!
      ) _
    ) AS features
  WHERE feature IS NOT NULL
  ORDER BY score DESC NULLS LAST,
    way_pixels DESC NULLS LAST
  ) AS amenity_points WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "building-text"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"way_pixels\" FROM (SELECT
    name,
    ST_PointOnSurface(way) AS way,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
  FROM planet_osm_polygon
  WHERE way && !bbox!
    AND building IS NOT NULL
    AND building NOT IN ('no')
    AND name IS NOT NULL
  ORDER BY way_area DESC
) AS building_text WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "interpolation"
sql = """
SELECT ST_AsBinary(way) AS geom FROM (SELECT
    way
  FROM planet_osm_line
  WHERE \"addr:interpolation\" IS NOT NULL
) AS interpolation WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "addresses"
sql = """
SELECT ST_AsBinary(way) AS geom, \"addr_housenumber\", \"addr_housename\", \"addr_unit\", \"way_pixels\" FROM (SELECT
    way,
    \"addr:housenumber\" AS addr_housenumber,
    \"addr:housename\" AS addr_housename,
    tags->'addr:unit' AS addr_unit,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
  FROM planet_osm_polygon
  WHERE ((\"addr:housenumber\" IS NOT NULL) OR (\"addr:housename\" IS NOT NULL) OR ((tags->'addr:unit') IS NOT NULL))
    AND building IS NOT NULL
UNION ALL
SELECT
    way,
    \"addr:housenumber\" AS addr_housenumber,
    \"addr:housename\" AS addr_housename,
    tags->'addr:unit' AS addr_unit,
    NULL AS way_pixels
  FROM planet_osm_point
  WHERE (\"addr:housenumber\" IS NOT NULL) OR (\"addr:housename\" IS NOT NULL) OR ((tags->'addr:unit') IS NOT NULL)
  ORDER BY way_pixels DESC NULLS LAST
) AS addresses WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "water-lines-text"
sql = """
SELECT ST_AsBinary(way) AS geom, \"waterway\", \"lock\", \"name\", \"natural\", \"lock_name\", \"int_intermittent\", \"int_tunnel\" FROM (SELECT
    way,
    waterway,
    lock,
    name,
    \"natural\",
    tags-> 'lock_name' AS lock_name,
    CASE WHEN tags->'intermittent' IN ('yes')
      OR tags->'seasonal' IN ('yes', 'spring', 'summer', 'autumn', 'winter', 'wet_season', 'dry_season')
      THEN 'yes' ELSE 'no' END AS int_intermittent,
    CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel
  FROM planet_osm_line
  WHERE (waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi')
         OR \"natural\" IN ('bay', 'strait'))
    AND (tunnel IS NULL or tunnel != 'culvert')
    AND name IS NOT NULL
  ORDER BY COALESCE(layer,0)
) AS water_lines_text WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "ferry-routes-text"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\" FROM (SELECT
    way,
    name
  FROM planet_osm_line
  WHERE route = 'ferry'
    AND osm_id > 0
    AND name IS NOT NULL
) AS ferry_routes_text WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "admin-text"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"admin_level\", \"way_pixels\" FROM (SELECT
    way,
    name,
    admin_level,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
  FROM planet_osm_polygon
  WHERE boundary = 'administrative'
    AND admin_level IN ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')
    AND name IS NOT NULL
  ORDER BY admin_level::integer ASC, way_area DESC
) AS admin_text WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "LineString"
name = "protected-areas-text"
sql = """
SELECT ST_AsBinary(way) AS geom, \"name\", \"boundary\", \"protect_class\", \"way_pixels\" FROM (SELECT
    way,
    name,
    boundary,
    tags->'protect_class' AS protect_class,
    way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
  FROM planet_osm_polygon
  WHERE (boundary IN ('aboriginal_lands', 'national_park')
         OR leisure = 'nature_reserve'
         OR (boundary = 'protected_area' AND tags->'protect_class' IN ('1','1a','1b','2','3','4','5','6','7','24','97','98','99')))
    AND name IS NOT NULL
) AS protected_areas_text WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Point"
name = "amenity-low-priority"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\", \"access\", \"prio\" FROM (SELECT
    way,
    COALESCE(
      'highway_' || CASE WHEN highway IN ('mini_roundabout') THEN highway ELSE NULL END,
      'railway_' || CASE WHEN railway IN ('level_crossing', 'crossing') THEN railway ELSE NULL END,
      'amenity_' || CASE WHEN amenity IN ('bicycle_parking', 'motorcycle_parking', 'bench',
                    'waste_basket', 'waste_disposal') THEN amenity ELSE NULL END,
      'amenity_' || CASE WHEN amenity IN ('parking') AND (tags->'parking' NOT IN ('underground') OR (tags->'parking') IS NULL) THEN amenity ELSE NULL END,
      'historic_' || CASE WHEN historic IN ('wayside_cross', 'wayside_shrine') THEN historic ELSE NULL END,
      'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,
      'barrier_' || CASE WHEN barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block', 'log', 'cattle_grid', 'stile', 'motorcycle_barrier', 'cycle_barrier', 'full-height_turnstile', 'turnstile', 'kissing_gate') THEN barrier ELSE NULL END
    )  AS feature,
    access,
    CASE WHEN amenity IN ('waste_basket', 'waste_disposal') THEN 2 ELSE 1 END AS prio
  FROM planet_osm_point p
  WHERE highway IN ('mini_roundabout')
     OR railway IN ('level_crossing', 'crossing')
     OR amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'bench', 'waste_basket', 'waste_disposal')
     OR historic IN ('wayside_cross', 'wayside_shrine')
     OR man_made IN ('cross')
     OR barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block', 'log', 'cattle_grid', 'stile', 'motorcycle_barrier', 'cycle_barrier', 'full-height_turnstile', 'turnstile', 'kissing_gate')
  ORDER BY prio
  ) AS amenity_low_priority WHERE way && !BBOX!"""

[[providers.layers]]
geometry_fieldname = "geom"
geometry_type = "Polygon"
name = "amenity-low-priority-poly"
sql = """
SELECT ST_AsBinary(way) AS geom, \"feature\", \"access\" FROM (SELECT
    way,
    COALESCE(
      'amenity_' || CASE WHEN amenity IN ('bicycle_parking', 'motorcycle_parking') THEN amenity ELSE NULL END,
      'amenity_' || CASE WHEN amenity IN ('parking') AND (tags->'parking' NOT IN ('underground') OR (tags->'parking') IS NULL) THEN amenity ELSE NULL END,
      'barrier_' || CASE WHEN barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block', 'log', 'cattle_grid', 'stile', 'motorcycle_barrier', 'cycle_barrier', 'full-height_turnstile', 'turnstile', 'kissing_gate') THEN barrier ELSE NULL END
    )  AS feature,
    access
  FROM planet_osm_polygon p
  WHERE amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking')
     OR barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block', 'log', 'cattle_grid', 'stile', 'motorcycle_barrier', 'cycle_barrier', 'full-height_turnstile', 'turnstile', 'kissing_gate')
  ) AS amenity_low_priority_poly WHERE way && !BBOX!"""

[webserver]
port = ":8080"
